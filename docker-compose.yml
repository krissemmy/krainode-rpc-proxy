services:
  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
    expose:
      - "8000"
    env_file:
      - .env
    environment:
      - SERVICE_NAME=krainode
      - LOG_LEVEL=INFO
      - ALLOWED_ORIGINS=["https://krainode.krissemmy.com","https://localhost:3000"]
      - RATE_LIMIT_RPS=5
      - REQUEST_TIMEOUT_SECONDS=20
      - CHAINS_CONFIG_FILE=chains.yaml
    volumes:
      - ./logs:/app/logs
      - ./backend/chains.yaml:/app/chains.yaml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  caddy:
    image: caddy:2
    ports:
      - "80:80"
      - "443:443"
    environment:
      - EMAIL=${EMAIL}
      - API_HOST=${API_HOST}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - api
    restart: unless-stopped
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - api

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  prometheus_data:
  grafana_data:
  caddy_data:
  caddy_config:
